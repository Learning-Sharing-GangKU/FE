name: FE CI Pipeline

on:
  push:
    branches: [ "main", "dev" ]
  pull_request:
    branches: [ "main", "dev" ]

permissions:
  contents: read
  id-token: write   # OIDC

env:
  AWS_REGION: ap-northeast-2
  ECR_REPO: learning-sharing-gangku/fe

jobs:
  fe-ci:
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install deps
        run: npm ci

      - name: Lint (ESLint if present)
        run: |
          if npx --no-install eslint -v >/dev/null 2>&1; then
            npx eslint . --max-warnings=0
          else
            echo "ESLint not configured. Skipping."
          fi

      - name: Type check (tsc if present)
        run: |
          if npx --no-install tsc -v >/dev/null 2>&1; then
            npx tsc --noEmit
          else
            echo "TypeScript not configured. Skipping."
          fi

      - name: Unit tests (Jest)
        run: |
          if npm run | grep -q " test:unit"; then
            npm run test:unit -- --ci
          elif npx --no-install jest --version >/dev/null 2>&1; then
            # 스크립트 없으면 관용적 패턴으로 실행
            npx jest --ci --maxWorkers=50% \
              --testPathPattern="(tests|__tests__|test)/unit|\\.unit\\."
          else
            echo "Jest not configured. Skipping unit tests."
          fi

      - name: Integration tests (Jest)
        run: |
          if npm run | grep -q " test:it"; then
            npm run test:it -- --ci
          elif npx --no-install jest --version >/dev/null 2>&1; then
            # 스크립트 없으면 관용적 패턴으로 실행
            npx jest --ci --maxWorkers=50% \
              --testPathPattern="(tests|__tests__|test)/integration|\\.it\\."
          else
            echo "Jest not configured. Skipping integration tests."
          fi

      - name: Build app
        run: |
          if npm run | grep -q " build"; then
            npm run build
          else
            echo "No build script. Skipping."
          fi

      # --- ECR push + scan: PR에서는 실행 안 함 ---
      - name: Configure AWS credentials (OIDC)
        if: github.event_name != 'pull_request'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::590183972842:role/GitHubActionsECRPush
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        if: github.event_name != 'pull_request'
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Prepare image meta
        if: github.event_name != 'pull_request'
        id: meta
        run: |
          SHA_TAG=sha-${GITHUB_SHA::7}
          BRANCH_TAG=${GITHUB_REF_NAME}-latest
          IMAGE=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO }}
          echo "image=$IMAGE" >> $GITHUB_OUTPUT
          echo "sha_tag=$SHA_TAG" >> $GITHUB_OUTPUT
          echo "branch_tag=$BRANCH_TAG" >> $GITHUB_OUTPUT

      - name: Setup Buildx
        if: github.event_name != 'pull_request'
        uses: docker/setup-buildx-action@v3

      - name: Build & Push (ECR)
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ steps.meta.outputs.image }}:${{ steps.meta.outputs.sha_tag }}
            ${{ steps.meta.outputs.image }}:${{ steps.meta.outputs.branch_tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
